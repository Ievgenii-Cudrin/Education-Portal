// <auto-generated />
namespace EducationPortalConsoleApp.DependencyInjection
{
    using System;
    using BusinessLogicLayer.Interfaces;
    using DataAccessLayer.DataContext;
    using DataAccessLayer.Interfaces;
    using EducationPortal.PL.Controller;
    using EducationPortal.PL.Interfaces;
    using EducationPortalConsoleApp.Controller;
    using EducationPortalConsoleApp.Interfaces;
    using Microsoft.Extensions.DependencyInjection;
    using XmlDataBase.Interfaces;
    using XmlDataBase.Serialization;
    using EducationPortal.PL.Mapping;
    using EducationPortal.BLL.ServicesSql;
    using EducationPortal.DAL.DataContext;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.Configuration;
    using System.IO;
    using EducationPortal.BLL.Services;
    using EducationPortal.BLL.Interfaces;
    using EducationPortal.DAL.Interfaces;
    using EducationPortal.DAL.Loggers;
    using EducationPortal.BLL.Loggers;
    using EducationPortal.DAL.XML.Repositories;
    using EducationPortal.DAL.Repositories;
    using EducationPortal.Domain.Entities;

    public class Startup
    {
        static IConfiguration configuration;

        public Startup()
        {
            configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("Config.json", optional: false, reloadOnChange: true)
            .Build();
        }
        public IServiceProvider ConfigureService()
        {
            var provider = new ServiceCollection()
                .AddSingleton(typeof(IXmlSet<>), typeof(XmlSet<>))
                .AddSingleton(typeof(IXmlSerializeContext<>), typeof(XmlSerializationContextGeneric<>))
                // Repositories
                .AddTransient<IRepository<UserCourse>, UserCourseXmlRepository>()
                .AddSingleton<IRepository<CourseMaterial>, CourseMaterialXmlRepository>()
                .AddTransient<IRepository<CourseSkill>, CourseSkillXmlRepository>()
                .AddTransient<IRepository<UserMaterial>, UserMaterialXmlRepository>()
                .AddTransient<IRepository<UserSkill>, UserSkillXmlRepository>()
                .AddTransient<IRepository<UserCourseMaterial>, UserCourseMaterialXmlRepository>()
                .AddTransient(typeof(IRepository<>), typeof(RepositoryXml<>))
                //.AddTransient(typeof(IRepository<>), typeof(RepositorySql<>))
                .AddDbContext<ApplicationContext>(options => options.UseSqlServer(configuration["ConnectionStrings:UserDBConnection"]))
                // Services
                .AddTransient<IUserService, UserService>()
                .AddTransient<ICourseService, CourseService>()
                .AddTransient<IMaterialService, MaterialService>()
                .AddTransient<ISkillService, SkillService>()
                .AddTransient<ILogInService, LogInService>()
                .AddScoped<IUserCourseSqlService, UserCourseService>()
                .AddTransient<ICourseMaterialService, CourseMaterialService>()
                .AddTransient<ICourseSkillService, CourseSkillService>()
                .AddTransient<IUserCourseMaterialSqlService, UserCourseMaterialService>()
                .AddTransient<IUserMaterialSqlService, UserMaterialService>()
                .AddTransient<IUserSkillSqlService, UserSkillService>()
                .AddTransient<IMaterialComparerService, MaterialComparerService>()
                .AddTransient<ICourseComparerService, CourseComparerService>()
                .AddTransient<IAuthorizedUser, AuthorizerUser>()
                .AddTransient<IWorkWithAuthorizedUser, AuthorizerUser>()
                //ConsoleControllers
                .AddTransient<IMaterialController, MaterialController>()
                .AddTransient<IUserController, UserController>()
                .AddTransient<ICourseController, CourseController>()
                .AddTransient<ISkillController, SkillController>()
                .AddTransient<IPassCourseController, PassCourseController>()
                .AddTransient<IMapperService, Mapping>()
                //Loggers
                .AddTransient<IDalSqlLogger, DalSqlNLogLogger>()
                .AddTransient<IBLLLogger, BLLNlogLogger>()
                .BuildServiceProvider();

            return provider;
        }
    }
}
